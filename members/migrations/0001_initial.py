# Generated by Django 5.2.4 on 2025-07-13 13:05

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AtividadeParceiro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_ativ', models.CharField(max_length=100, unique=True)),
                ('descricao', models.TextField(blank=True)),
                ('icon_ativ', models.ImageField(blank=True, null=True, upload_to='parceiros_atividades/')),
                ('cod_ativ', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('ativo', models.BooleanField(default=True)),
                ('data_cadastro', models.DateTimeField(auto_now_add=True)),
                ('data_atualizacao', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Atividade do Parceiro',
                'verbose_name_plural': 'Atividades dos Parceiros',
                'ordering': ['nome_ativ'],
            },
        ),
        migrations.CreateModel(
            name='Cidades',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('cep_geral_cidade', models.CharField(blank=True, max_length=9, null=True)),
                ('cod_ibg_cidade', models.CharField(blank=True, max_length=10, null=True, unique=True)),
                ('dt_cad', models.DateTimeField(auto_now_add=True)),
                ('dt_update', models.DateTimeField(auto_now=True)),
                ('dt_delete', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PessoasRelacoes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.CharField(max_length=100, unique=True)),
                ('grau_parentesco', models.CharField(blank=True, max_length=50, null=True)),
                ('data_cadastro', models.DateTimeField(auto_now_add=True)),
                ('data_atualizacao', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Planos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100, unique=True)),
                ('descricao', models.TextField(blank=True)),
                ('valor_plano', models.DecimalField(decimal_places=2, max_digits=10)),
                ('valor_promocional', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('is_taxa_boleto', models.BooleanField(default=False, help_text='Marcar se há taxa de boleto')),
                ('taxa_boleto', models.DecimalField(decimal_places=2, default=0.0, help_text='Valor da taxa de boleto, se aplicável', max_digits=5)),
                ('cor_plano', models.CharField(default='blue', help_text='Cor do plano para identificação visual', max_length=20)),
                ('destaque_plano', models.BooleanField(default=False, help_text='Marcar se o plano deve ser destacado na lista')),
                ('img_plano', models.ImageField(blank=True, help_text='Imagem do plano para identificação visual', null=True, upload_to='planos/')),
                ('icon_plano', models.ImageField(blank=True, help_text='Ícone do plano para identificação visual', null=True, upload_to='planos/icons/')),
                ('ativo', models.BooleanField(default=True)),
                ('apenas_interno', models.BooleanField(default=False, help_text='Marcar se o plano é apenas para uso interno')),
                ('num_solicit_plano', models.IntegerField(blank=True, help_text='Número de solicitação do plano para controle interno', null=True)),
                ('num_cotas', models.IntegerField(default=1, help_text='Número de cotas disponíveis para o plano')),
                ('publico_interno', models.BooleanField(default=False, help_text='Marcar se o plano é apenas para uso interno')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True)),
                ('data_atualizacao', models.DateTimeField(auto_now=True)),
                ('data_exclusao', models.DateTimeField(blank=True, help_text='Data de exclusão do plano, se aplicável', null=True)),
            ],
            options={
                'verbose_name': 'Plano',
                'verbose_name_plural': 'Planos',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='Profissoes',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_profissao', models.CharField(max_length=100, unique=True)),
                ('requer_registro', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Profissão',
                'verbose_name_plural': 'Profissões',
                'ordering': ['nome_profissao'],
            },
        ),
        migrations.CreateModel(
            name='Ufs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sigla', models.CharField(max_length=2, unique=True)),
                ('nome', models.CharField(max_length=100)),
                ('dt_cad', models.DateTimeField(auto_now_add=True)),
                ('dt_update', models.DateTimeField(auto_now=True)),
                ('dt_delete', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'UF',
                'verbose_name_plural': 'UFs',
                'ordering': ['sigla'],
            },
        ),
        migrations.CreateModel(
            name='Membro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_membro', models.CharField(max_length=20, unique=True)),
                ('tipo_membro', models.CharField(choices=[('cooperado', 'Cooperado'), ('funcionario', 'Funcionário'), ('conselheiro', 'Conselheiro'), ('presidente', 'Presidente')], default='cooperado', max_length=20)),
                ('status', models.CharField(choices=[('ativo', 'Ativo'), ('inativo', 'Inativo'), ('suspenso', 'Suspenso')], default='ativo', max_length=20)),
                ('ficha_cadastral_numero', models.IntegerField(blank=True, help_text='Número da ficha cadastral associada à contribuição', null=True)),
                ('term_adesao_numero', models.IntegerField(blank=True, help_text='Número do termo de adesão associado à contribuição', null=True)),
                ('data_adesao', models.DateField(default=django.utils.timezone.now)),
                ('foto', models.ImageField(blank=True, null=True, upload_to='membros/')),
                ('ativo', models.BooleanField(default=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pessoas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Membro',
                'verbose_name_plural': 'Membros',
                'ordering': ['user__first_name', 'user__last_name'],
            },
        ),
        migrations.CreateModel(
            name='Contribuicao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('valor', models.DecimalField(decimal_places=2, max_digits=10)),
                ('data_pagamento', models.DateField()),
                ('mes_referencia', models.DateField()),
                ('descricao', models.TextField(blank=True)),
                ('tipo', models.CharField(choices=[('mensal', 'Mensal'), ('anual', 'Anual'), ('extra', 'Extra')], default='mensal', max_length=20)),
                ('status', models.CharField(choices=[('pago', 'Pago'), ('pendente', 'Pendente'), ('atrasado', 'Atrasado'), ('cancelado', 'Cancelado')], default='pago', max_length=20)),
                ('comprovante', models.FileField(blank=True, null=True, upload_to='comprovantes/')),
                ('data_criacao', models.DateTimeField(auto_now_add=True)),
                ('membro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contribuicoes', to='members.membro')),
            ],
            options={
                'verbose_name': 'Contribuição',
                'verbose_name_plural': 'Contribuições',
                'ordering': ['-data_pagamento'],
            },
        ),
        migrations.CreateModel(
            name='MembroNegociacao',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numdocnegcop', models.CharField(blank=True, help_text='Número do documento da negociação', max_length=20, null=True, unique=True)),
                ('formpagto', models.CharField(choices=[('boleto', 'Boleto'), ('cartao_credito', 'Cartão de Crédito'), ('transferencia', 'Transferência'), ('dinheiro', 'Dinheiro'), ('pix', 'PIX'), ('chequeavista', 'Cheque à Vista'), ('chequeparcelado', 'Cheque Parcelado'), ('deposito', 'Depósito'), ('consignado', 'Consignado'), ('valealimentacao', 'Vale Alimentação'), ('valetransporte', 'Vale Transporte'), ('transferenciabancaria', 'Transferência Bancária'), ('crediariopropio', 'Crediário Próprio'), ('cartao_debito', 'Cartão de Débito')], default='boleto', max_length=21)),
                ('isrecebido', models.BooleanField(default=False, help_text='Marcar se a negociação foi recebida')),
                ('dataemissao', models.DateField(default=django.utils.timezone.now, help_text='Data de emissão da negociação')),
                ('datavencimento', models.DateField(help_text='Data de vencimento da negociação')),
                ('valor_bruto', models.DecimalField(decimal_places=2, help_text='Valor bruto da negociação', max_digits=10)),
                ('valor_desconto', models.DecimalField(decimal_places=2, default=0.0, help_text='Valor do desconto aplicado na negociação', max_digits=10)),
                ('valor_acrescimo', models.DecimalField(decimal_places=2, default=0.0, help_text='Valor do acréscimo aplicado na negociação', max_digits=10)),
                ('valor_negociado', models.DecimalField(decimal_places=2, help_text='Valor total negociado', max_digits=10)),
                ('valor_liquido', models.DecimalField(decimal_places=2, help_text='Valor líquido da negociação', max_digits=10)),
                ('valor_pago', models.DecimalField(decimal_places=2, default=0.0, help_text='Valor já pago na negociação', max_digits=10)),
                ('datapagamento', models.DateField(blank=True, help_text='Data do pagamento da negociação', null=True)),
                ('datacadastro', models.DateTimeField(auto_now_add=True, help_text='Data de cadastro da negociação')),
                ('dataatualizacao', models.DateTimeField(auto_now=True, help_text='Data da última atualização da negociação')),
                ('membro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='negociacoes', to='members.membro')),
            ],
            options={
                'verbose_name': 'Negociação do Membro',
                'verbose_name_plural': 'Negociações dos Membros',
                'ordering': ['-dataemissao'],
            },
        ),
        migrations.CreateModel(
            name='Parceiros',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_parceiro', models.CharField(choices=[('fornecedor', 'Fornecedor'), ('cliente', 'Cliente'), ('parceiro', 'Parceiro')], default='parceiro', max_length=20)),
                ('contato', models.CharField(blank=True, max_length=100, null=True)),
                ('telefone', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('descricao', models.TextField(blank=True)),
                ('site', models.URLField(blank=True, null=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='parceiros/')),
                ('data_cadastro', models.DateTimeField(auto_now_add=True)),
                ('ativo', models.BooleanField(default=True)),
                ('data_atualizacao', models.DateTimeField(auto_now=True)),
                ('atividades', models.ManyToManyField(blank=True, related_name='parceiros', to='members.atividadeparceiro')),
            ],
            options={
                'verbose_name': 'Parceiro',
                'verbose_name_plural': 'Parceiros',
                'ordering': ['nome'],
            },
        ),
        migrations.CreateModel(
            name='ParceiroCondPagamento',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('forma_pagamento', models.CharField(choices=[('boleto', 'Boleto'), ('cartao_credito', 'Cartão de Crédito'), ('transferencia', 'Transferência'), ('dinheiro', 'Dinheiro'), ('pix', 'PIX'), ('chequeavista', 'Cheque à Vista'), ('chequeparcelado', 'Cheque Parcelado'), ('deposito', 'Depósito'), ('consignado', 'Consignado'), ('valealimentacao', 'Vale Alimentação'), ('valetransporte', 'Vale Transporte'), ('transferenciabancaria', 'Transferência Bancária'), ('crediariopropio', 'Crediário Próprio'), ('cartao_debito', 'Cartão de Débito')], default='boleto', max_length=21)),
                ('prazo_pagamento', models.IntegerField(help_text='Prazo em dias para pagamento após a compra')),
                ('desconto', models.DecimalField(decimal_places=2, default=0.0, help_text='Desconto aplicado no valor do plano', max_digits=5)),
                ('num_parcelas', models.IntegerField(default=1, help_text='Número de parcelas para pagamento')),
                ('taxa_juros', models.DecimalField(decimal_places=2, default=0.0, help_text='Taxa de juros aplicada em caso de parcelamento', max_digits=5)),
                ('taxa_desconto', models.DecimalField(decimal_places=2, default=0.0, help_text='Taxa de desconto aplicada no valor do plano', max_digits=5)),
                ('vlr_parcela', models.DecimalField(decimal_places=2, default=0.0, help_text='Valor da parcela do plano', max_digits=10)),
                ('vlr_total', models.DecimalField(decimal_places=2, default=0.0, help_text='Valor total do plano considerando parcelas e taxas', max_digits=10)),
                ('taxa_juros_parcelas', models.DecimalField(decimal_places=2, default=0.0, help_text='Taxa de juros aplicada nas parcelas', max_digits=5)),
                ('taxa_desconto_parcelas', models.DecimalField(decimal_places=2, max_digits=5)),
                ('ativo', models.BooleanField(default=True)),
                ('data_cadastro', models.DateTimeField(auto_now_add=True)),
                ('data_atualizacao', models.DateTimeField(auto_now=True)),
                ('parceiro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cond_pagamentos', to='members.parceiros')),
            ],
            options={
                'verbose_name': 'Condição de Pagamento do Parceiro',
                'verbose_name_plural': 'Condições de Pagamento dos Parceiros',
                'ordering': ['parceiro', 'forma_pagamento'],
            },
        ),
        migrations.CreateModel(
            name='ParceirosServicos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_servico', models.CharField(max_length=100)),
                ('descricao_servico', models.TextField(blank=True)),
                ('preco_servico', models.DecimalField(decimal_places=2, max_digits=10)),
                ('ativo', models.BooleanField(default=True)),
                ('imgservico', models.ImageField(blank=True, null=True, upload_to='parceiros_servicos/')),
                ('categoria_servico', models.CharField(blank=True, max_length=100)),
                ('data_cadastro', models.DateTimeField(auto_now_add=True)),
                ('data_atualizacao', models.DateTimeField(auto_now=True)),
                ('parceiro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='servicos', to='members.parceiros')),
            ],
            options={
                'verbose_name': 'Serviço do Parceiro',
                'verbose_name_plural': 'Serviços dos Parceiros',
                'ordering': ['parceiro', 'nome_servico'],
            },
        ),
        migrations.CreateModel(
            name='Pessoas',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('tipo', models.CharField(choices=[('fisica', 'Pessoa Física'), ('juridica', 'Pessoa Jurídica')], default='fisica', max_length=20)),
                ('is_dependente_pessoa', models.BooleanField(default=False, help_text='Marcar se é dependente de outra pessoa')),
                ('data_nascimento', models.DateField(blank=True, null=True)),
                ('sexo', models.CharField(blank=True, choices=[('masculino', 'Masculino'), ('feminino', 'Feminino')], max_length=10, null=True)),
                ('rg', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('orgao_expedidor_rg', models.CharField(blank=True, max_length=20, null=True)),
                ('data_expedicao_rg', models.DateField(blank=True, null=True)),
                ('cpf', models.CharField(blank=True, max_length=14, null=True, unique=True)),
                ('cnpj', models.CharField(blank=True, max_length=18, null=True, unique=True)),
                ('razao_social', models.CharField(blank=True, max_length=200, null=True)),
                ('nome_fantasia', models.CharField(blank=True, max_length=200, null=True)),
                ('inscricao_estadual', models.CharField(blank=True, max_length=20, null=True)),
                ('inscricao_municipal', models.CharField(blank=True, max_length=20, null=True)),
                ('ie_substituta', models.CharField(blank=True, max_length=20, null=True)),
                ('ie_st', models.CharField(blank=True, max_length=20, null=True)),
                ('ie_municipal', models.CharField(blank=True, max_length=20, null=True)),
                ('ie_estadual', models.CharField(blank=True, max_length=20, null=True)),
                ('ie_federal', models.CharField(blank=True, max_length=20, null=True)),
                ('ie_matriz_filial', models.CharField(blank=True, max_length=20, null=True)),
                ('ie_suframa', models.CharField(blank=True, max_length=20, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('telefone', models.CharField(blank=True, max_length=20, null=True)),
                ('endereco', models.TextField(blank=True, null=True)),
                ('estado_civil', models.CharField(blank=True, choices=[('solteiro', 'Solteiro'), ('casado', 'Casado'), ('divorciado', 'Divorciado'), ('viuvo', 'Viúvo')], max_length=20, null=True)),
                ('nacionalidade', models.CharField(blank=True, max_length=50, null=True)),
                ('naturalidade', models.CharField(blank=True, max_length=100, null=True)),
                ('cep', models.CharField(blank=True, max_length=9, null=True)),
                ('complemento', models.CharField(blank=True, max_length=100, null=True)),
                ('numero', models.CharField(blank=True, max_length=20, null=True)),
                ('bairro', models.CharField(blank=True, max_length=100, null=True)),
                ('telefone_comercial', models.CharField(blank=True, max_length=20, null=True)),
                ('telefone_celular', models.CharField(blank=True, max_length=20, null=True)),
                ('telefone_residencial', models.CharField(blank=True, max_length=20, null=True)),
                ('telefone_outro', models.CharField(blank=True, max_length=20, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('facebook', models.URLField(blank=True, null=True)),
                ('instagram', models.URLField(blank=True, null=True)),
                ('linkedin', models.URLField(blank=True, null=True)),
                ('twitter', models.URLField(blank=True, null=True)),
                ('youtube', models.URLField(blank=True, null=True)),
                ('foto', models.ImageField(blank=True, null=True, upload_to='pessoas/')),
                ('ativo', models.BooleanField(default=True)),
                ('status_cadastro', models.CharField(choices=[('pendente', 'Pendente'), ('aprovado', 'Aprovado'), ('rejeitado', 'Rejeitado')], default='pendente', max_length=20)),
                ('status_financeiro', models.CharField(choices=[('ativo', 'Ativo'), ('inativo', 'Inativo')], default='ativo', max_length=20)),
                ('cod_indicacao_pessoa', models.CharField(blank=True, max_length=20, null=True, unique=True)),
                ('data_atualizacao', models.DateTimeField(auto_now=True)),
                ('data_exclusao', models.DateTimeField(blank=True, null=True)),
                ('data_cadastro', models.DateTimeField(auto_now_add=True)),
                ('cidade', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pessoas', to='members.cidades')),
                ('profissao', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='pessoas', to='members.profissoes')),
                ('estado', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pessoas', to='members.ufs')),
            ],
            options={
                'verbose_name': 'Pessoa',
                'verbose_name_plural': 'Pessoas',
                'ordering': ['nome'],
            },
        ),
        migrations.AddField(
            model_name='parceiros',
            name='nome',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parceiros', to='members.pessoas'),
        ),
        migrations.AddField(
            model_name='membro',
            name='pessoa',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='members.pessoas'),
        ),
        migrations.CreateModel(
            name='parceiros_config',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tipo_desc_p', models.CharField(choices=[('percentual', 'Percentual'), ('valor_fixo', 'Valor Fixo')], default='percentual', max_length=20)),
                ('valor_desc_p', models.DecimalField(decimal_places=2, default=0, max_digits=5)),
                ('valor_desc_f', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('desconto_ativo', models.BooleanField(default=False, help_text='Marcar se o desconto está ativo')),
                ('desconto_percentual', models.DecimalField(decimal_places=2, max_digits=5)),
                ('ativo', models.BooleanField(default=True)),
                ('data_cadastro', models.DateTimeField(auto_now_add=True)),
                ('data_atualizacao', models.DateTimeField(auto_now=True)),
                ('cond_pagamento', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='configuracoes', to='members.parceirocondpagamento')),
                ('parceiro', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='configuracoes', to='members.parceiros')),
                ('plano', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='configuracoes', to='members.planos')),
            ],
            options={
                'verbose_name': 'Configuração do Parceiro',
                'verbose_name_plural': 'Configurações dos Parceiros',
                'ordering': ['parceiro', 'plano'],
            },
        ),
        migrations.CreateModel(
            name='PlanosAnexos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_anexo', models.CharField(max_length=100)),
                ('descricao_anexo', models.TextField(blank=True)),
                ('arquivo_anexo', models.FileField(blank=True, null=True, upload_to='planos/anexos/')),
                ('icon_anexo', models.ImageField(blank=True, help_text='Ícone do anexo para identificação visual', null=True, upload_to='planos/anexos/icons/')),
                ('tipo_arquivo', models.CharField(choices=[('pdf', 'PDF'), ('docx', 'DOCX'), ('xlsx', 'XLSX'), ('jpg', 'JPG'), ('png', 'PNG')], default='pdf', max_length=20)),
                ('tamanho_arquivo', models.PositiveIntegerField(blank=True, help_text='Tamanho do arquivo em bytes', null=True)),
                ('data_upload', models.DateTimeField(auto_now_add=True)),
                ('data_atualizacao', models.DateTimeField(auto_now=True)),
                ('plano', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='anexos', to='members.planos')),
            ],
            options={
                'verbose_name': 'Anexo do Plano',
                'verbose_name_plural': 'Anexos dos Planos',
                'ordering': ['plano', 'nome_anexo'],
            },
        ),
        migrations.CreateModel(
            name='PlanosCondPagto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('forma_pagamento', models.CharField(choices=[('boleto', 'Boleto'), ('cartao_credito', 'Cartão de Crédito'), ('transferencia', 'Transferência'), ('dinheiro', 'Dinheiro'), ('pix', 'PIX'), ('chequeavista', 'Cheque à Vista'), ('chequeparcelado', 'Cheque Parcelado'), ('deposito', 'Depósito'), ('consignado', 'Consignado'), ('valealimentacao', 'Vale Alimentação'), ('valetransporte', 'Vale Transporte'), ('transferenciabancaria', 'Transferência Bancária'), ('crediariopropio', 'Crediário Próprio'), ('cartao_debito', 'Cartão de Débito')], default='boleto', max_length=21)),
                ('prazo_pagamento', models.IntegerField(help_text='Prazo em dias para pagamento após a compra')),
                ('desconto', models.DecimalField(decimal_places=2, default=0.0, help_text='Desconto aplicado no valor do plano', max_digits=5)),
                ('num_parcelas', models.IntegerField(default=1, help_text='Número de parcelas para pagamento')),
                ('taxa_juros', models.DecimalField(decimal_places=2, default=0.0, help_text='Taxa de juros aplicada em caso de parcelamento', max_digits=5)),
                ('taxa_desconto', models.DecimalField(decimal_places=2, default=0.0, help_text='Taxa de desconto aplicada no valor do plano', max_digits=5)),
                ('vlr_parcela', models.DecimalField(decimal_places=2, default=0.0, help_text='Valor da parcela do plano', max_digits=10)),
                ('vlr_total', models.DecimalField(decimal_places=2, default=0.0, help_text='Valor total do plano considerando parcelas e taxas', max_digits=10)),
                ('taxa_juros_parcelas', models.DecimalField(decimal_places=2, default=0.0, help_text='Taxa de juros aplicada nas parcelas', max_digits=5)),
                ('taxa_desconto_parcelas', models.DecimalField(decimal_places=2, max_digits=5)),
                ('ativo', models.BooleanField(default=True)),
                ('data_cadastro', models.DateTimeField(auto_now_add=True)),
                ('data_atualizacao', models.DateTimeField(auto_now=True)),
                ('plano', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cond_pagamentos', to='members.planos')),
            ],
            options={
                'verbose_name': 'Condição de Pagamento do Plano',
                'verbose_name_plural': 'Condições de Pagamento dos Planos',
                'ordering': ['plano', 'forma_pagamento'],
            },
        ),
        migrations.CreateModel(
            name='PlanosPublicos',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_publico', models.CharField(max_length=100, unique=True)),
                ('descricao_publica', models.TextField(blank=True)),
                ('valor_publico', models.DecimalField(decimal_places=2, max_digits=10)),
                ('ativo', models.BooleanField(default=True)),
                ('data_cadastro', models.DateTimeField(auto_now_add=True)),
                ('data_atualizacao', models.DateTimeField(auto_now=True)),
                ('plano', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='publicos', to='members.planos')),
            ],
            options={
                'verbose_name': 'Plano Público',
                'verbose_name_plural': 'Planos Públicos',
                'ordering': ['nome_publico'],
            },
        ),
        migrations.AddField(
            model_name='cidades',
            name='uf',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cidades', to='members.ufs'),
        ),
    ]
